version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lamatic-postgres
    environment:
      POSTGRES_DB: lamatic_clone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - lamatic-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lamatic-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - lamatic-network

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.2
    container_name: lamatic-weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - lamatic-network

  # GraphQL API Server
  api:
    build:
      context: ../
      dockerfile: docker/api.Dockerfile
    container_name: lamatic-api
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/lamatic_clone
      REDIS_URL: redis://redis:6379
      WEAVIATE_URL: http://weaviate:8080
      JWT_SECRET: your-super-secret-jwt-key
      NODE_ENV: development
    depends_on:
      - postgres
      - redis
      - weaviate
    volumes:
      - ../apps/api:/app
      - /app/node_modules
    networks:
      - lamatic-network
    restart: unless-stopped

  # Next.js Web Application
  web:
    build:
      context: ../
      dockerfile: docker/web.Dockerfile
    container_name: lamatic-web
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your-nextauth-secret
    depends_on:
      - api
    volumes:
      - ../apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - lamatic-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lamatic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    networks:
      - lamatic-network
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: lamatic-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lamatic-network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: lamatic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lamatic-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  lamatic-network:
    driver: bridge