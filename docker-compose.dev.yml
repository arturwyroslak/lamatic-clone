version: '3.8'

services:
  # Frontend Web Application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000/graphql
    depends_on:
      - api
      - redis
    networks:
      - lamatic-network
    restart: unless-stopped

  # GraphQL API Server
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: development
    ports:
      - "4000:4000"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://lamatic:lamatic123@postgres:5432/lamatic_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret_change_in_production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_PALM_API_KEY=${GOOGLE_PALM_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - lamatic-network
    restart: unless-stopped

  # Edge Functions Runtime
  edge:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: development
    ports:
      - "8787:8787"
    volumes:
      - ./apps/edge:/app/apps/edge
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/edge/node_modules
    environment:
      - NODE_ENV=development
      - API_URL=http://api:4000/graphql
    depends_on:
      - api
    networks:
      - lamatic-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=lamatic_dev
      - POSTGRES_USER=lamatic
      - POSTGRES_PASSWORD=lamatic123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lamatic -d lamatic_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lamatic-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lamatic-network
    restart: unless-stopped

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.2
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,generative-openai,generative-cohere'
      CLUSTER_HOSTNAME: 'node1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lamatic-network
    restart: unless-stopped

  # Elasticsearch (for advanced search and analytics)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lamatic-network
    restart: unless-stopped

  # MongoDB (for document storage)
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME=lamatic
      - MONGO_INITDB_ROOT_PASSWORD=lamatic123
      - MONGO_INITDB_DATABASE=lamatic_dev
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lamatic-network
    restart: unless-stopped

  # Grafana (for monitoring and observability)
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - prometheus
    networks:
      - lamatic-network
    restart: unless-stopped

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lamatic-network
    restart: unless-stopped

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    ports:
      - "16686:16686"
      - "14268:14268"
    volumes:
      - jaeger_data:/badger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    networks:
      - lamatic-network
    restart: unless-stopped

  # MinIO (for file storage)
  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ACCESS_KEY=lamatic_access_key
      - MINIO_SECRET_KEY=lamatic_secret_key_change_in_production
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lamatic-network
    restart: unless-stopped

  # Mailhog (for email testing in development)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP
    networks:
      - lamatic-network
    restart: unless-stopped

  # NGINX (reverse proxy for development)
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
      - grafana
    networks:
      - lamatic-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  elasticsearch_data:
    driver: local
  mongodb_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  jaeger_data:
    driver: local
  minio_data:
    driver: local

networks:
  lamatic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16