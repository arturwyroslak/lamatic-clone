// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core entities
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  workspaces       WorkspaceMember[]
  ownedWorkspaces  Workspace[]       @relation("WorkspaceOwner")
  workflows        Workflow[]
  templates        Template[]
  agents           Agent[]
  apiKeys          ApiKey[]
  auditLogs        AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Workspace and team management
model Workspace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  plan        Plan      @default(FREE)
  settings    Json      @default("{}")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ownerId        String
  owner          User               @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members        WorkspaceMember[]
  workflows      Workflow[]
  templates      Template[]
  agents         Agent[]
  connectors     Connector[]
  dataSources    DataSource[]
  apiKeys        ApiKey[]
  deployments    Deployment[]
  executions     WorkflowExecution[]
  auditLogs      AuditLog[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String             @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceMemberRole @default(MEMBER)
  joinedAt    DateTime           @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// AI workflows and agents
model Workflow {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  version     Int           @default(1)
  definition  Json          // Flow definition with nodes and edges
  config      Json          @default("{}")
  isPublic    Boolean       @default(false)
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  executions   WorkflowExecution[]
  deployments  Deployment[]
  tests        WorkflowTest[]
  versions     WorkflowVersion[]

  @@map("workflows")
}

model WorkflowVersion {
  id         String   @id @default(cuid())
  workflowId String
  version    Int
  definition Json
  config     Json     @default("{}")
  changelog  String?
  createdAt  DateTime @default(now())

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, version])
  @@map("workflow_versions")
}

model WorkflowExecution {
  id          String            @id @default(cuid())
  workflowId  String
  status      ExecutionStatus   @default(PENDING)
  input       Json?
  output      Json?
  error       String?
  duration    Int?              // in milliseconds
  tokensUsed  Int?
  cost        Float?
  metadata    Json              @default("{}")
  startedAt   DateTime          @default(now())
  completedAt DateTime?

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  steps       ExecutionStep[]
  logs        ExecutionLog[]

  @@map("workflow_executions")
}

model ExecutionStep {
  id          String          @id @default(cuid())
  executionId String
  nodeId      String
  status      ExecutionStatus @default(PENDING)
  input       Json?
  output      Json?
  error       String?
  duration    Int?
  tokensUsed  Int?
  cost        Float?
  startedAt   DateTime        @default(now())
  completedAt DateTime?

  execution WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_steps")
}

model ExecutionLog {
  id          String    @id @default(cuid())
  executionId String
  level       LogLevel  @default(INFO)
  message     String
  metadata    Json      @default("{}")
  createdAt   DateTime  @default(now())

  execution WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

model WorkflowTest {
  id          String      @id @default(cuid())
  workflowId  String
  name        String
  description String?
  input       Json
  expectedOutput Json?
  status      TestStatus  @default(PENDING)
  lastRun     DateTime?
  results     Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_tests")
}

// Templates and marketplace
model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  tags        String[]
  definition  Json
  config      Json     @default("{}")
  featured    Boolean  @default(false)
  public      Boolean  @default(true)
  downloads   Int      @default(0)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  @@map("templates")
}

// AI Agents
model Agent {
  id           String      @id @default(cuid())
  name         String
  description  String?
  type         AgentType   @default(CONVERSATIONAL)
  status       AgentStatus @default(DRAFT)
  systemPrompt String
  config       Json        @default("{}")
  tools        String[]    // Array of tool IDs
  model        String      // Model ID (e.g., "gpt-4")
  temperature  Float       @default(0.7)
  maxTokens    Int         @default(1000)
  isPublic     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  conversations AgentConversation[]

  @@map("agents")
}

model AgentConversation {
  id        String   @id @default(cuid())
  agentId   String
  sessionId String
  messages  Json[]   // Array of message objects
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_conversations")
}

// Integrations and connectors
model Connector {
  id            String           @id @default(cuid())
  name          String
  integrationId String           // References integration registry
  status        ConnectorStatus  @default(INACTIVE)
  config        Json             @default("{}")
  credentials   Json             @default("{}") // Encrypted
  lastSync      DateTime?
  lastError     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  dataSources DataSource[]

  @@map("connectors")
}

model DataSource {
  id           String           @id @default(cuid())
  name         String
  type         DataSourceType
  status       DataSourceStatus @default(PENDING)
  config       Json             @default("{}")
  metadata     Json             @default("{}")
  indexedAt    DateTime?
  recordCount  Int              @default(0)
  size         BigInt           @default(0) // in bytes
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  connectorId String?
  connector   Connector? @relation(fields: [connectorId], references: [id])

  documents VectorDocument[]

  @@map("data_sources")
}

model VectorDocument {
  id           String   @id @default(cuid())
  dataSourceId String
  externalId   String?  // External ID from source system
  title        String
  content      String
  metadata     Json     @default("{}")
  embedding    Float[]  // Vector embedding
  checksum     String   // Content hash for deduplication
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  dataSource DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)

  @@unique([dataSourceId, externalId])
  @@map("vector_documents")
}

// Deployments
model Deployment {
  id          String           @id @default(cuid())
  workflowId  String
  name        String
  environment DeploymentEnv    @default(STAGING)
  status      DeploymentStatus @default(PENDING)
  config      Json             @default("{}")
  url         String?
  version     String
  metadata    Json             @default("{}")
  deployedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("deployments")
}

// API Keys and authentication
model ApiKey {
  id          String     @id @default(cuid())
  name        String
  key         String     @unique // Hashed
  permissions String[]   // Array of permissions
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

// Audit logging
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  metadata    Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum WorkspaceMemberRole {
  MEMBER
  ADMIN
  OWNER
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum TestStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
}

enum AgentType {
  CONVERSATIONAL
  TASK_ORIENTED
  REACTIVE
  AUTONOMOUS
}

enum AgentStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum ConnectorStatus {
  INACTIVE
  ACTIVE
  ERROR
  SYNCING
}

enum DataSourceType {
  FILE
  API
  DATABASE
  WEBHOOK
  RSS
  EMAIL
}

enum DataSourceStatus {
  PENDING
  INDEXING
  READY
  ERROR
}

enum DeploymentEnv {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum DeploymentStatus {
  PENDING
  DEPLOYING
  ACTIVE
  FAILED
  STOPPED
}